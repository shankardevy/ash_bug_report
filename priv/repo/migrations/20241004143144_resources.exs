defmodule AshBug.Repo.Migrations.Resources do
  @moduledoc """
  Updates resources based on their most recent snapshots.

  This file was autogenerated with `mix ash_postgres.generate_migrations`
  """

  use Ecto.Migration

  def up do
    create table(:users, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true)
      add(:email, :text)
    end

    create table(:messages, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true)
      add(:text, :text)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:conversation_id, :uuid)
      add(:user_id, :uuid)
    end

    create table(:conversations, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true)
    end

    alter table(:messages) do
      modify(
        :conversation_id,
        references(:conversations,
          column: :id,
          name: "messages_conversation_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )

      modify(
        :user_id,
        references(:users,
          column: :id,
          name: "messages_user_id_fkey",
          type: :uuid,
          prefix: "public"
        )
      )
    end

    alter table(:conversations) do
      add(:name, :text, null: false)
    end

    create table(:conversation_reads, primary_key: false) do
      add(:id, :uuid, null: false, default: fragment("uuid_generate_v7()"), primary_key: true)
      add(:last_read_at, :utc_datetime_usec, null: false)

      add(:inserted_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(:updated_at, :utc_datetime_usec,
        null: false,
        default: fragment("(now() AT TIME ZONE 'utc')")
      )

      add(
        :conversation_id,
        references(:conversations,
          column: :id,
          name: "conversation_reads_conversation_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )

      add(
        :user_id,
        references(:users,
          column: :id,
          name: "conversation_reads_user_id_fkey",
          type: :uuid,
          prefix: "public"
        ),
        null: false
      )
    end
  end

  def down do
    drop(constraint(:conversation_reads, "conversation_reads_conversation_id_fkey"))

    drop(constraint(:conversation_reads, "conversation_reads_user_id_fkey"))

    drop(table(:conversation_reads))

    alter table(:conversations) do
      remove(:name)
    end

    drop(constraint(:messages, "messages_conversation_id_fkey"))

    drop(constraint(:messages, "messages_user_id_fkey"))

    alter table(:messages) do
      modify(:user_id, :uuid)
      modify(:conversation_id, :uuid)
    end

    drop(table(:conversations))

    drop(table(:messages))

    drop(table(:users))
  end
end
